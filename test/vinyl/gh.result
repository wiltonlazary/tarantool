env = require('test_run')
---
...
test_run = env.new()
---
...
-- gh-283: hang after three creates and drops
s = box.schema.space.create('space0', {engine='vinyl'})
---
...
i = s:create_index('space0', {type = 'tree', parts = {1, 'string'}})
---
...
s:insert{'a', 'b', 'c'}
---
- ['a', 'b', 'c']
...
s:drop()
---
...
s = box.schema.space.create('space0', {engine='vinyl'})
---
...
i = s:create_index('space0', {type = 'tree', parts = {1, 'string'}})
---
...
s:insert{'a', 'b', 'c'}
---
- ['a', 'b', 'c']
...
t = s.index[0]:select({}, {iterator = box.index.ALL})
---
...
t
---
- - ['a', 'b', 'c']
...
s:drop()
---
...
s = box.schema.space.create('space0', {engine='vinyl'})
---
...
i = s:create_index('space0', {type = 'tree', parts = {1, 'string'}})
---
...
s:insert{'a', 'b', 'c'}
---
- ['a', 'b', 'c']
...
t = s.index[0]:select({}, {iterator = box.index.ALL})
---
...
t
---
- - ['a', 'b', 'c']
...
s:drop()
---
...
-- gh-280: crash if insert without index
s = box.schema.space.create('test', {engine='vinyl'})
---
...
s:insert{'a'}
---
- error: 'No index #0 is defined in space ''test'''
...
s:drop()
---
...
-- gh-436: No error when creating temporary vinyl space
s = box.schema.space.create('tester',{engine='vinyl', temporary=true})
---
- error: 'Can''t modify space ''tester'': space does not support temporary flag'
...
-- gh-432: ignored limit
s = box.schema.space.create('tester',{engine='vinyl'})
---
...
i = s:create_index('vinyl_index', {})
---
...
for v=1, 100 do s:insert({v}) end
---
...
t = s:select({''},{iterator='GT', limit =1})
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
t
---
- - ['a', 'b', 'c']
...
t = s:select({},{iterator='GT', limit =1})
---
...
t
---
- - [1]
...
s:drop()
---
...
s = box.schema.space.create('tester', {engine='vinyl'})
---
...
i = s:create_index('vinyl_index', {type = 'tree', parts = {1, 'string'}})
---
...
for v=1, 100 do s:insert({tostring(v)}) end
---
...
t = s:select({''},{iterator='GT', limit =1})
---
...
t
---
- - ['1']
...
t = s:select({},{iterator='GT', limit =1})
---
...
t
---
- - ['1']
...
s:drop()
---
...
-- gh-681: support or produce error on space::alter
s = box.schema.space.create('M', {engine='vinyl'})
---
...
i = s:create_index('primary',{})
---
...
s:insert{5}
---
- [5]
...
s.index.primary:alter({parts={1,'unsigned'}})
---
- error: alter is not supported for a Vinyl index
...
s:drop()
---
...
-- gh-1008: assertion if insert of wrong type
s = box.schema.space.create('t', {engine='vinyl'})
---
...
i = s:create_index('primary',{parts={1, 'string'}})
---
...
box.space.t:insert{1,'A'}
---
- error: 'Tuple field 1 type does not match one required by operation: expected string'
...
s:drop()
---
...
-- gh-1009: search for empty string fails
s = box.schema.space.create('t', {engine='vinyl'})
---
...
i = s:create_index('primary',{parts={1, 'string'}})
---
...
s:insert{''}
---
- ['']
...
#i:select{''}
---
- 1
...
i:get{''}
---
- ['']
...
s:drop()
---
...
-- gh-1407: upsert generate garbage data
email_space_id = 'email'
---
...
email_space = box.schema.space.create(email_space_id, { engine = 'vinyl', if_not_exists = true })
---
...
i = email_space:create_index('primary', { parts = {1, 'string'} })
---
...
time = 1234
---
...
email = "test@domain.com"
---
...
email_hash_index = "asdfasdfs"
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:upsert({email, email_hash_index, time}, {{'!', -1, email_hash_index}, {'!', -1, time}})
---
...
box.space.email:select{email}
---
- - ['test@domain.com', 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs',
    1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234,
    'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs',
    1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234, 'asdfasdfs', 1234]
...
box.space.email:drop()
---
...
--gh-1540: vinyl: invalid results from LE/LT iterators
s = box.schema.space.create('test', { engine = 'vinyl' })
---
...
i = box.space.test:create_index('primary', { parts = { 1, 'unsigned', 2, 'unsigned' } })
---
...
for i =1,2 do for j=1,9 do box.space.test:replace({i, j}) end end
---
...
box.space.test:select({1, 999999}, {iterator = 'LE'})
---
- - [1, 9]
  - [1, 8]
  - [1, 7]
  - [1, 6]
  - [1, 5]
  - [1, 4]
  - [1, 3]
  - [1, 2]
  - [1, 1]
...
box.space.test:drop()
---
...
s1 = box.schema.create_space('s1',{engine='vinyl'})
---
...
i1 = s1:create_index('primary',{parts={1,'unsigned',2,'unsigned'}})
---
...
s2 = box.schema.create_space('s2',{engine='memtx'})
---
...
i2 = s2:create_index('primary',{parts={1,'unsigned',2,'unsigned'}})
---
...
for i = 1,3 do for j = 1,5 do s1:insert{i, j} s2:insert{i, j} end end
---
...
itrs = {'GE', 'GT', 'LE', 'LT'}
---
...
good = true
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function my_equal(a, b)
    if type(a) ~= type(b) then
        return false
    elseif type(a) ~= 'table' and not box.tuple.is(a) then
        return a == b
    end
    for k,v in pairs(a) do if not my_equal(b[k], v) then return false end end
    for k,v in pairs(b) do if not my_equal(a[k], v) then return false end end
    return true
end;
---
...
for i = 0,4 do
    for j = 0,6 do
        for k = 1,4 do
            opts = {iterator=itrs[k]}
            if not my_equal(s1:select({i, j}, opts), s2:select({i, j}, opts)) then
                good = false
            end
        end
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
good
---
- true
...
s1:drop()
---
...
s2:drop()
---
...
--
-- gh-1608: tuple disappears after invalid upsert
--
s = box.schema.create_space('test', {engine = 'vinyl'})
---
...
_ = s:create_index('test', {type = 'tree', parts = {1, 'unsigned', 2, 'string'}})
---
...
s:put({1, 'test', 3, 4})
---
- [1, 'test', 3, 4]
...
s:select()
---
- - [1, 'test', 3, 4]
...
s:upsert({1, 'test', 'failed'}, {{'=', 3, 33}, {'=', 4, nil}})
---
- error: Unknown UPDATE operation
...
s:select()
---
- - [1, 'test', 3, 4]
...
s:drop()
---
...
--
-- gh-1684: vinyl: infinite cycle on box.snapshot()
--
-- Create and drop several indices
space = box.schema.space.create('test', { engine = 'vinyl'  })
---
...
pk = space:create_index('primary')
---
...
index2 = space:create_index('secondary', { parts = {2, 'string'}  })
---
...
index3 = space:create_index('third', { parts = {3, 'string'}, unique = false  })
---
...
index2:drop()
---
...
index2 = space:create_index('secondary', { parts = {4, 'string'}  })
---
...
index3:drop()
---
...
index2:drop()
---
...
index2 = space:create_index('secondary', { parts = {2, 'string'}  })
---
...
index3 = space:create_index('third', { parts = {3, 'string'}, unique = false  })
---
...
index4 = space:create_index('fourth', { parts = {2, 'string', 3, 'string'}  })
---
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'}  })
---
...
box.snapshot()
---
- ok
...
space:drop()
---
...
--
-- gh-1658: auto_increment
--
space = box.schema.space.create('tweedledum', { engine = 'vinyl' })
---
...
_ = space:create_index('primary')
---
...
space:auto_increment{'a'}
---
- [1, 'a']
...
space:auto_increment{'b'}
---
- [2, 'b']
...
space:auto_increment{'c'}
---
- [3, 'c']
...
space:select{}
---
- - [1, 'a']
  - [2, 'b']
  - [3, 'c']
...
space:truncate()
---
...
space:auto_increment{'a'}
---
- [1, 'a']
...
space:auto_increment{'b'}
---
- [2, 'b']
...
space:auto_increment{'c'}
---
- [3, 'c']
...
space:select{}
---
- - [1, 'a']
  - [2, 'b']
  - [3, 'c']
...
space:delete{2}
---
...
space:auto_increment{'d'}
---
- [4, 'd']
...
space:select{}
---
- - [1, 'a']
  - [3, 'c']
  - [4, 'd']
...
space:drop()
---
...
--
-- Truncate basic test
--
-- truncate
s = box.schema.space.create('name_of_space', {engine='vinyl'})
---
...
i = s:create_index('name_of_index', {type = 'tree', parts = {1, 'string'}})
---
...
s:insert{'a', 'b', 'c'}
---
- ['a', 'b', 'c']
...
s:select{'a'}
---
- - ['a', 'b', 'c']
...
s:truncate()
---
...
s:select{}
---
- []
...
s:insert{'b', 'c', 'd'}
---
- ['b', 'c', 'd']
...
s:select{}
---
- - ['b', 'c', 'd']
...
s:truncate()
---
...
s:select{}
---
- []
...
s:drop()
---
...
--
-- gh-1725: vinyl: merge iterator can't merge more than two runs 
--
s0 = box.schema.space.create('tweedledum', {engine = 'vinyl'})
---
...
i0 = s0:create_index('primary', { type = 'tree', parts = {1, 'unsigned'}})
---
...
-- integer keys
s0:replace{1, 'tuple'}
---
- [1, 'tuple']
...
box.snapshot()
---
- ok
...
s0:replace{2, 'tuple 2'}
---
- [2, 'tuple 2']
...
box.snapshot()
---
- ok
...
s0:insert{3, 'tuple 3'}
---
- [3, 'tuple 3']
...
s0.index['primary']:get{1}
---
- [1, 'tuple']
...
s0.index['primary']:get{2}
---
- [2, 'tuple 2']
...
s0.index['primary']:get{3}
---
- [3, 'tuple 3']
...
s0:drop()
---
...
