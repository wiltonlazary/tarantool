test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
test_run:cmd("push filter '"..engine.."' to 'engine'")
---
- true
...
--------------------------------------------------------------------------------
-- Prefix search (test partially specified keys in TREE indexes)
--------------------------------------------------------------------------------
s1 = box.schema.space.create('tree_prefix_search', { engine = engine })
---
...
_ = s1:create_index('primary', { type = 'tree', parts = {1, 'str'}})
---
...
_ = s1:replace{''}
---
...
_ = s1:replace{'abcd'}
---
...
_ = s1:replace{'abcda'}
---
...
_ = s1:replace{'abcda_'}
---
...
_ = s1:replace{'abcdb'}
---
...
_ = s1:replace{'abcdb_'}
---
...
_ = s1:replace{'abcdb__'}
---
...
_ = s1:replace{'abcdb___'}
---
...
_ = s1:replace{'abcdc'}
---
...
_ = s1:replace{'abcdc_'}
---
...
s1.index.primary:select('abcdb', { iterator = 'GE' })
---
- - ['abcdb']
  - ['abcdb_']
  - ['abcdb__']
  - ['abcdb___']
  - ['abcdc']
  - ['abcdc_']
...
s1.index.primary:select('', { iterator = 'GE' })
---
- - ['']
  - ['abcd']
  - ['abcda']
  - ['abcda_']
  - ['abcdb']
  - ['abcdb_']
  - ['abcdb__']
  - ['abcdb___']
  - ['abcdc']
  - ['abcdc_']
...
s1.index.primary:select('', { iterator = 'GT' })
---
- - ['abcd']
  - ['abcda']
  - ['abcda_']
  - ['abcdb']
  - ['abcdb_']
  - ['abcdb__']
  - ['abcdb___']
  - ['abcdc']
  - ['abcdc_']
...
s1.index.primary:select('', { iterator = 'LE' })
---
- - ['']
...
s1.index.primary:select('', { iterator = 'LT' })
---
- []
...
s1:drop()
---
...
s1 = nil
---
...
-------------------------------------------------------------------------------
-- single-part (unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('uint', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'num'}})
---
...
for i=1,9 do space:replace{i} end
---
...
pk:select({}, { iterator = 'ALL' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({}, { iterator = 'EQ' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({}, { iterator = 'REQ' })
---
- - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
pk:select({}, { iterator = 'GE' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({}, { iterator = 'GT' })
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({}, { iterator = 'LE' })
---
- - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
pk:select({}, { iterator = 'LT' })
---
- - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
pk:select({0}, { iterator = 'EQ' })
---
- []
...
pk:select({0}, { iterator = 'REQ' })
---
- []
...
pk:select({0}, { iterator = 'LE' })
---
- []
...
pk:select({0}, { iterator = 'LT' })
---
- []
...
pk:select({1}, { iterator = 'EQ' })
---
- - [1]
...
pk:select({1}, { iterator = 'REQ' })
---
- - [1]
...
pk:select({1}, { iterator = 'LE' })
---
- - [1]
...
pk:select({1}, { iterator = 'LT' })
---
- []
...
pk:select({5}, { iterator = 'EQ' })
---
- - [5]
...
pk:select({5}, { iterator = 'REQ' })
---
- - [5]
...
pk:select({5}, { iterator = 'GE' })
---
- - [5]
  - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({5}, { iterator = 'GT' })
---
- - [6]
  - [7]
  - [8]
  - [9]
...
pk:select({5}, { iterator = 'LE' })
---
- - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
pk:select({5}, { iterator = 'LT' })
---
- - [4]
  - [3]
  - [2]
  - [1]
...
pk:select({9}, { iterator = 'EQ' })
---
- - [9]
...
pk:select({9}, { iterator = 'REQ' })
---
- - [9]
...
pk:select({9}, { iterator = 'GE' })
---
- - [9]
...
pk:select({9}, { iterator = 'GT' })
---
- []
...
pk:select({10}, { iterator = 'EQ' })
---
- []
...
pk:select({10}, { iterator = 'REQ' })
---
- []
...
pk:select({10}, { iterator = 'GE' })
---
- []
...
pk:select({10}, { iterator = 'GT' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
pk:get({0})
---
...
pk:get({5})
---
- [5]
...
pk:get({10})
---
...
pk:get({10, 15})
---
- error: Invalid key part count in an exact match (expected 1, got 2)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- single-part sparse (unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('sparse_uint', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {3, 'num'}})
---
...
for i=1,9 do space:replace{'', 0, i} end
---
...
space:insert{'', 0, 1} -- conflict
---
- error: Duplicate key exists in unique index 'primary' in space 'sparse_uint'
...
pk:select({}, { iterator = 'ALL' })
---
- - ['', 0, 1]
  - ['', 0, 2]
  - ['', 0, 3]
  - ['', 0, 4]
  - ['', 0, 5]
  - ['', 0, 6]
  - ['', 0, 7]
  - ['', 0, 8]
  - ['', 0, 9]
...
pk:select({}, { iterator = 'EQ' })
---
- - ['', 0, 1]
  - ['', 0, 2]
  - ['', 0, 3]
  - ['', 0, 4]
  - ['', 0, 5]
  - ['', 0, 6]
  - ['', 0, 7]
  - ['', 0, 8]
  - ['', 0, 9]
...
pk:select({}, { iterator = 'REQ' })
---
- - ['', 0, 9]
  - ['', 0, 8]
  - ['', 0, 7]
  - ['', 0, 6]
  - ['', 0, 5]
  - ['', 0, 4]
  - ['', 0, 3]
  - ['', 0, 2]
  - ['', 0, 1]
...
pk:select({}, { iterator = 'GE' })
---
- - ['', 0, 1]
  - ['', 0, 2]
  - ['', 0, 3]
  - ['', 0, 4]
  - ['', 0, 5]
  - ['', 0, 6]
  - ['', 0, 7]
  - ['', 0, 8]
  - ['', 0, 9]
...
pk:select({}, { iterator = 'GT' })
---
- - ['', 0, 1]
  - ['', 0, 2]
  - ['', 0, 3]
  - ['', 0, 4]
  - ['', 0, 5]
  - ['', 0, 6]
  - ['', 0, 7]
  - ['', 0, 8]
  - ['', 0, 9]
...
pk:select({}, { iterator = 'LE' })
---
- - ['', 0, 9]
  - ['', 0, 8]
  - ['', 0, 7]
  - ['', 0, 6]
  - ['', 0, 5]
  - ['', 0, 4]
  - ['', 0, 3]
  - ['', 0, 2]
  - ['', 0, 1]
...
pk:select({}, { iterator = 'LT' })
---
- - ['', 0, 9]
  - ['', 0, 8]
  - ['', 0, 7]
  - ['', 0, 6]
  - ['', 0, 5]
  - ['', 0, 4]
  - ['', 0, 3]
  - ['', 0, 2]
  - ['', 0, 1]
...
pk:select({0}, { iterator = 'EQ' })
---
- []
...
pk:select({0}, { iterator = 'REQ' })
---
- []
...
pk:select({0}, { iterator = 'LE' })
---
- []
...
pk:select({0}, { iterator = 'LT' })
---
- []
...
pk:select({1}, { iterator = 'EQ' })
---
- - ['', 0, 1]
...
pk:select({1}, { iterator = 'REQ' })
---
- - ['', 0, 1]
...
pk:select({1}, { iterator = 'LE' })
---
- - ['', 0, 1]
...
pk:select({1}, { iterator = 'LT' })
---
- []
...
pk:select({5}, { iterator = 'EQ' })
---
- - ['', 0, 5]
...
pk:select({5}, { iterator = 'REQ' })
---
- - ['', 0, 5]
...
pk:select({5}, { iterator = 'GE' })
---
- - ['', 0, 5]
  - ['', 0, 6]
  - ['', 0, 7]
  - ['', 0, 8]
  - ['', 0, 9]
...
pk:select({5}, { iterator = 'GT' })
---
- - ['', 0, 6]
  - ['', 0, 7]
  - ['', 0, 8]
  - ['', 0, 9]
...
pk:select({5}, { iterator = 'LE' })
---
- - ['', 0, 5]
  - ['', 0, 4]
  - ['', 0, 3]
  - ['', 0, 2]
  - ['', 0, 1]
...
pk:select({5}, { iterator = 'LT' })
---
- - ['', 0, 4]
  - ['', 0, 3]
  - ['', 0, 2]
  - ['', 0, 1]
...
pk:select({9}, { iterator = 'EQ' })
---
- - ['', 0, 9]
...
pk:select({9}, { iterator = 'REQ' })
---
- - ['', 0, 9]
...
pk:select({9}, { iterator = 'GE' })
---
- - ['', 0, 9]
...
pk:select({9}, { iterator = 'GT' })
---
- []
...
pk:select({10}, { iterator = 'EQ' })
---
- []
...
pk:select({10}, { iterator = 'REQ' })
---
- []
...
pk:select({10}, { iterator = 'GE' })
---
- []
...
pk:select({10}, { iterator = 'GT' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
pk:get({0})
---
...
pk:get({5})
---
- ['', 0, 5]
...
pk:get({10})
---
...
pk:get({10, 15})
---
- error: Invalid key part count in an exact match (expected 1, got 2)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- single-part (string)
-------------------------------------------------------------------------------
space = box.schema.space.create('str', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'str'}})
---
...
for i=1,9 do space:replace{'0'..i} end
---
...
pk:select({}, { iterator = 'ALL' })
---
- - ['01']
  - ['02']
  - ['03']
  - ['04']
  - ['05']
  - ['06']
  - ['07']
  - ['08']
  - ['09']
...
pk:select({}, { iterator = 'EQ' })
---
- - ['01']
  - ['02']
  - ['03']
  - ['04']
  - ['05']
  - ['06']
  - ['07']
  - ['08']
  - ['09']
...
pk:select({}, { iterator = 'REQ' })
---
- - ['09']
  - ['08']
  - ['07']
  - ['06']
  - ['05']
  - ['04']
  - ['03']
  - ['02']
  - ['01']
...
pk:select({}, { iterator = 'GE' })
---
- - ['01']
  - ['02']
  - ['03']
  - ['04']
  - ['05']
  - ['06']
  - ['07']
  - ['08']
  - ['09']
...
pk:select({}, { iterator = 'GT' })
---
- - ['01']
  - ['02']
  - ['03']
  - ['04']
  - ['05']
  - ['06']
  - ['07']
  - ['08']
  - ['09']
...
pk:select({}, { iterator = 'LE' })
---
- - ['09']
  - ['08']
  - ['07']
  - ['06']
  - ['05']
  - ['04']
  - ['03']
  - ['02']
  - ['01']
...
pk:select({}, { iterator = 'LT' })
---
- - ['09']
  - ['08']
  - ['07']
  - ['06']
  - ['05']
  - ['04']
  - ['03']
  - ['02']
  - ['01']
...
pk:select({'00'}, { iterator = 'EQ' })
---
- []
...
pk:select({'00'}, { iterator = 'REQ' })
---
- []
...
pk:select({'00'}, { iterator = 'LE' })
---
- []
...
pk:select({'00'}, { iterator = 'LT' })
---
- []
...
pk:select({'01'}, { iterator = 'EQ' })
---
- - ['01']
...
pk:select({'01'}, { iterator = 'REQ' })
---
- - ['01']
...
pk:select({'01'}, { iterator = 'LE' })
---
- - ['01']
...
pk:select({'01'}, { iterator = 'LT' })
---
- []
...
pk:select({'05'}, { iterator = 'EQ' })
---
- - ['05']
...
pk:select({'05'}, { iterator = 'REQ' })
---
- - ['05']
...
pk:select({'05'}, { iterator = 'GE' })
---
- - ['05']
  - ['06']
  - ['07']
  - ['08']
  - ['09']
...
pk:select({'05'}, { iterator = 'GT' })
---
- - ['06']
  - ['07']
  - ['08']
  - ['09']
...
pk:select({'05'}, { iterator = 'LE' })
---
- - ['05']
  - ['04']
  - ['03']
  - ['02']
  - ['01']
...
pk:select({'05'}, { iterator = 'LT' })
---
- - ['04']
  - ['03']
  - ['02']
  - ['01']
...
pk:select({'09'}, { iterator = 'EQ' })
---
- - ['09']
...
pk:select({'09'}, { iterator = 'REQ' })
---
- - ['09']
...
pk:select({'09'}, { iterator = 'GE' })
---
- - ['09']
...
pk:select({'09'}, { iterator = 'GT' })
---
- []
...
pk:select({'10'}, { iterator = 'EQ' })
---
- []
...
pk:select({'10'}, { iterator = 'REQ' })
---
- []
...
pk:select({'10'}, { iterator = 'GE' })
---
- []
...
pk:select({'10'}, { iterator = 'GT' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
pk:get({'0'})
---
...
pk:get({'5'})
---
...
pk:get({'10'})
---
...
pk:get({'10', '15'})
---
- error: Invalid key part count in an exact match (expected 1, got 2)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (unsigned + string)
-------------------------------------------------------------------------------
space = box.schema.space.create('uint_str', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'num', 2, 'str'}})
---
...
for i=1,9 do for j=1,3 do space:replace({i, '0'..j}) end end
---
...
--
-- one part
--
pk:select({}, { iterator = 'ALL' })
---
- - [1, '01']
  - [1, '02']
  - [1, '03']
  - [2, '01']
  - [2, '02']
  - [2, '03']
  - [3, '01']
  - [3, '02']
  - [3, '03']
  - [4, '01']
  - [4, '02']
  - [4, '03']
  - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({}, { iterator = 'EQ' })
---
- - [1, '01']
  - [1, '02']
  - [1, '03']
  - [2, '01']
  - [2, '02']
  - [2, '03']
  - [3, '01']
  - [3, '02']
  - [3, '03']
  - [4, '01']
  - [4, '02']
  - [4, '03']
  - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({}, { iterator = 'REQ' })
---
- - [9, '03']
  - [9, '02']
  - [9, '01']
  - [8, '03']
  - [8, '02']
  - [8, '01']
  - [7, '03']
  - [7, '02']
  - [7, '01']
  - [6, '03']
  - [6, '02']
  - [6, '01']
  - [5, '03']
  - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({}, { iterator = 'GE' })
---
- - [1, '01']
  - [1, '02']
  - [1, '03']
  - [2, '01']
  - [2, '02']
  - [2, '03']
  - [3, '01']
  - [3, '02']
  - [3, '03']
  - [4, '01']
  - [4, '02']
  - [4, '03']
  - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({}, { iterator = 'GT' })
---
- - [1, '01']
  - [1, '02']
  - [1, '03']
  - [2, '01']
  - [2, '02']
  - [2, '03']
  - [3, '01']
  - [3, '02']
  - [3, '03']
  - [4, '01']
  - [4, '02']
  - [4, '03']
  - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({}, { iterator = 'LE' })
---
- - [9, '03']
  - [9, '02']
  - [9, '01']
  - [8, '03']
  - [8, '02']
  - [8, '01']
  - [7, '03']
  - [7, '02']
  - [7, '01']
  - [6, '03']
  - [6, '02']
  - [6, '01']
  - [5, '03']
  - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({}, { iterator = 'LT' })
---
- - [9, '03']
  - [9, '02']
  - [9, '01']
  - [8, '03']
  - [8, '02']
  - [8, '01']
  - [7, '03']
  - [7, '02']
  - [7, '01']
  - [6, '03']
  - [6, '02']
  - [6, '01']
  - [5, '03']
  - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({0}, { iterator = 'EQ' })
---
- []
...
pk:select({0}, { iterator = 'REQ' })
---
- []
...
pk:select({0}, { iterator = 'LE' })
---
- []
...
pk:select({0}, { iterator = 'LT' })
---
- []
...
pk:select({1}, { iterator = 'EQ' })
---
- - [1, '01']
  - [1, '02']
  - [1, '03']
...
pk:select({1}, { iterator = 'REQ' })
---
- - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({1}, { iterator = 'LE' })
---
- - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({1}, { iterator = 'LT' })
---
- []
...
pk:select({9}, { iterator = 'EQ' })
---
- - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({9}, { iterator = 'REQ' })
---
- - [9, '03']
  - [9, '02']
  - [9, '01']
...
pk:select({9}, { iterator = 'GE' })
---
- - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({9}, { iterator = 'GT' })
---
- []
...
pk:select({10}, { iterator = 'EQ' })
---
- []
...
pk:select({10}, { iterator = 'REQ' })
---
- []
...
pk:select({10}, { iterator = 'GE' })
---
- []
...
pk:select({10}, { iterator = 'GT' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 2, got 0)
...
pk:get({'5'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
--
-- two parts
--
pk:select({5, '00'}, { iterator = 'EQ' })
---
- []
...
pk:select({5, '00'}, { iterator = 'REQ' })
---
- []
...
pk:select({5, '00'}, { iterator = 'GE' })
---
- - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '00'}, { iterator = 'GT' })
---
- - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '00'}, { iterator = 'LE' })
---
- - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '00'}, { iterator = 'LT' })
---
- - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '01'}, { iterator = 'EQ' })
---
- - [5, '01']
...
pk:select({5, '01'}, { iterator = 'REQ' })
---
- - [5, '01']
...
pk:select({5, '01'}, { iterator = 'GE' })
---
- - [5, '01']
  - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '01'}, { iterator = 'GT' })
---
- - [5, '02']
  - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '01'}, { iterator = 'LE' })
---
- - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '01'}, { iterator = 'LT' })
---
- - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '03'}, { iterator = 'EQ' })
---
- - [5, '03']
...
pk:select({5, '03'}, { iterator = 'REQ' })
---
- - [5, '03']
...
pk:select({5, '03'}, { iterator = 'GE' })
---
- - [5, '03']
  - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '03'}, { iterator = 'GT' })
---
- - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '03'}, { iterator = 'LE' })
---
- - [5, '03']
  - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '03'}, { iterator = 'LT' })
---
- - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '04'}, { iterator = 'EQ' })
---
- []
...
pk:select({5, '04'}, { iterator = 'REQ' })
---
- []
...
pk:select({5, '04'}, { iterator = 'GE' })
---
- - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '04'}, { iterator = 'GT' })
---
- - [6, '01']
  - [6, '02']
  - [6, '03']
  - [7, '01']
  - [7, '02']
  - [7, '03']
  - [8, '01']
  - [8, '02']
  - [8, '03']
  - [9, '01']
  - [9, '02']
  - [9, '03']
...
pk:select({5, '04'}, { iterator = 'LE' })
---
- - [5, '03']
  - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:select({5, '04'}, { iterator = 'LT' })
---
- - [5, '03']
  - [5, '02']
  - [5, '01']
  - [4, '03']
  - [4, '02']
  - [4, '01']
  - [3, '03']
  - [3, '02']
  - [3, '01']
  - [2, '03']
  - [2, '02']
  - [2, '01']
  - [1, '03']
  - [1, '02']
  - [1, '01']
...
pk:get({4, '05'})
---
...
pk:get({4, '03'})
---
- [4, '03']
...
pk:get({4, '03', 100})
---
- error: Invalid key part count in an exact match (expected 2, got 3)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part (string + unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('str_uint', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'str', 2, 'num'}})
---
...
for i=1,9 do for j=1,3 do space:replace({'0'..i, j}) end end
---
...
--
-- one part
--
pk:select({}, { iterator = 'ALL' })
---
- - ['01', 1]
  - ['01', 2]
  - ['01', 3]
  - ['02', 1]
  - ['02', 2]
  - ['02', 3]
  - ['03', 1]
  - ['03', 2]
  - ['03', 3]
  - ['04', 1]
  - ['04', 2]
  - ['04', 3]
  - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({}, { iterator = 'EQ' })
---
- - ['01', 1]
  - ['01', 2]
  - ['01', 3]
  - ['02', 1]
  - ['02', 2]
  - ['02', 3]
  - ['03', 1]
  - ['03', 2]
  - ['03', 3]
  - ['04', 1]
  - ['04', 2]
  - ['04', 3]
  - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({}, { iterator = 'REQ' })
---
- - ['09', 3]
  - ['09', 2]
  - ['09', 1]
  - ['08', 3]
  - ['08', 2]
  - ['08', 1]
  - ['07', 3]
  - ['07', 2]
  - ['07', 1]
  - ['06', 3]
  - ['06', 2]
  - ['06', 1]
  - ['05', 3]
  - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({}, { iterator = 'GE' })
---
- - ['01', 1]
  - ['01', 2]
  - ['01', 3]
  - ['02', 1]
  - ['02', 2]
  - ['02', 3]
  - ['03', 1]
  - ['03', 2]
  - ['03', 3]
  - ['04', 1]
  - ['04', 2]
  - ['04', 3]
  - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({}, { iterator = 'GT' })
---
- - ['01', 1]
  - ['01', 2]
  - ['01', 3]
  - ['02', 1]
  - ['02', 2]
  - ['02', 3]
  - ['03', 1]
  - ['03', 2]
  - ['03', 3]
  - ['04', 1]
  - ['04', 2]
  - ['04', 3]
  - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({}, { iterator = 'LE' })
---
- - ['09', 3]
  - ['09', 2]
  - ['09', 1]
  - ['08', 3]
  - ['08', 2]
  - ['08', 1]
  - ['07', 3]
  - ['07', 2]
  - ['07', 1]
  - ['06', 3]
  - ['06', 2]
  - ['06', 1]
  - ['05', 3]
  - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({}, { iterator = 'LT' })
---
- - ['09', 3]
  - ['09', 2]
  - ['09', 1]
  - ['08', 3]
  - ['08', 2]
  - ['08', 1]
  - ['07', 3]
  - ['07', 2]
  - ['07', 1]
  - ['06', 3]
  - ['06', 2]
  - ['06', 1]
  - ['05', 3]
  - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'00'}, { iterator = 'EQ' })
---
- []
...
pk:select({'00'}, { iterator = 'REQ' })
---
- []
...
pk:select({'00'}, { iterator = 'LE' })
---
- []
...
pk:select({'00'}, { iterator = 'LT' })
---
- []
...
pk:select({'01'}, { iterator = 'EQ' })
---
- - ['01', 1]
  - ['01', 2]
  - ['01', 3]
...
pk:select({'01'}, { iterator = 'REQ' })
---
- - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'01'}, { iterator = 'LE' })
---
- - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'01'}, { iterator = 'LT' })
---
- []
...
pk:select({'09'}, { iterator = 'EQ' })
---
- - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'09'}, { iterator = 'REQ' })
---
- - ['09', 3]
  - ['09', 2]
  - ['09', 1]
...
pk:select({'09'}, { iterator = 'GE' })
---
- - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'09'}, { iterator = 'GT' })
---
- []
...
pk:select({'10'}, { iterator = 'EQ' })
---
- []
...
pk:select({'10'}, { iterator = 'REQ' })
---
- []
...
pk:select({'10'}, { iterator = 'GE' })
---
- []
...
pk:select({'10'}, { iterator = 'GT' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 2, got 0)
...
pk:get({'00'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
pk:get({'05'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
pk:get({'10'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
--
-- two parts
--
pk:select({'05', 0}, { iterator = 'EQ' })
---
- []
...
pk:select({'05', 0}, { iterator = 'REQ' })
---
- []
...
pk:select({'05', 0}, { iterator = 'GE' })
---
- - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 0}, { iterator = 'GT' })
---
- - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 0}, { iterator = 'LE' })
---
- - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 0}, { iterator = 'LT' })
---
- - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 1}, { iterator = 'EQ' })
---
- - ['05', 1]
...
pk:select({'05', 1}, { iterator = 'REQ' })
---
- - ['05', 1]
...
pk:select({'05', 1}, { iterator = 'GE' })
---
- - ['05', 1]
  - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 1}, { iterator = 'GT' })
---
- - ['05', 2]
  - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 1}, { iterator = 'LE' })
---
- - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 1}, { iterator = 'LT' })
---
- - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 3}, { iterator = 'EQ' })
---
- - ['05', 3]
...
pk:select({'05', 3}, { iterator = 'REQ' })
---
- - ['05', 3]
...
pk:select({'05', 3}, { iterator = 'GE' })
---
- - ['05', 3]
  - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 3}, { iterator = 'GT' })
---
- - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 3}, { iterator = 'LE' })
---
- - ['05', 3]
  - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 3}, { iterator = 'LT' })
---
- - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 4}, { iterator = 'EQ' })
---
- []
...
pk:select({'05', 4}, { iterator = 'REQ' })
---
- []
...
pk:select({'05', 4}, { iterator = 'GE' })
---
- - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 4}, { iterator = 'GT' })
---
- - ['06', 1]
  - ['06', 2]
  - ['06', 3]
  - ['07', 1]
  - ['07', 2]
  - ['07', 3]
  - ['08', 1]
  - ['08', 2]
  - ['08', 3]
  - ['09', 1]
  - ['09', 2]
  - ['09', 3]
...
pk:select({'05', 4}, { iterator = 'LE' })
---
- - ['05', 3]
  - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:select({'05', 4}, { iterator = 'LT' })
---
- - ['05', 3]
  - ['05', 2]
  - ['05', 1]
  - ['04', 3]
  - ['04', 2]
  - ['04', 1]
  - ['03', 3]
  - ['03', 2]
  - ['03', 1]
  - ['02', 3]
  - ['02', 2]
  - ['02', 1]
  - ['01', 3]
  - ['01', 2]
  - ['01', 1]
...
pk:get({'04', 5})
---
...
pk:get({'04', 3})
---
- ['04', 3]
...
pk:get({'04', 3, 100})
---
- error: Invalid key part count in an exact match (expected 2, got 3)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multi-part sparse (string + unsigned)
-------------------------------------------------------------------------------
space = box.schema.space.create('sparse_str_uint', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {3, 'str', 1, 'num'}})
---
...
for i=1,9 do for j=1,3 do space:replace({i, '', '0'..j}) end end
---
...
-- conflicts
space:insert({9, '', '01'})
---
- error: Duplicate key exists in unique index 'primary' in space 'sparse_str_uint'
...
--
-- one part
--
pk:select({}, { iterator = 'ALL' })
---
- - [1, '', '01']
  - [2, '', '01']
  - [3, '', '01']
  - [4, '', '01']
  - [5, '', '01']
  - [6, '', '01']
  - [7, '', '01']
  - [8, '', '01']
  - [9, '', '01']
  - [1, '', '02']
  - [2, '', '02']
  - [3, '', '02']
  - [4, '', '02']
  - [5, '', '02']
  - [6, '', '02']
  - [7, '', '02']
  - [8, '', '02']
  - [9, '', '02']
  - [1, '', '03']
  - [2, '', '03']
  - [3, '', '03']
  - [4, '', '03']
  - [5, '', '03']
  - [6, '', '03']
  - [7, '', '03']
  - [8, '', '03']
  - [9, '', '03']
...
pk:select({}, { iterator = 'EQ' })
---
- - [1, '', '01']
  - [2, '', '01']
  - [3, '', '01']
  - [4, '', '01']
  - [5, '', '01']
  - [6, '', '01']
  - [7, '', '01']
  - [8, '', '01']
  - [9, '', '01']
  - [1, '', '02']
  - [2, '', '02']
  - [3, '', '02']
  - [4, '', '02']
  - [5, '', '02']
  - [6, '', '02']
  - [7, '', '02']
  - [8, '', '02']
  - [9, '', '02']
  - [1, '', '03']
  - [2, '', '03']
  - [3, '', '03']
  - [4, '', '03']
  - [5, '', '03']
  - [6, '', '03']
  - [7, '', '03']
  - [8, '', '03']
  - [9, '', '03']
...
pk:select({}, { iterator = 'REQ' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({}, { iterator = 'GE' })
---
- - [1, '', '01']
  - [2, '', '01']
  - [3, '', '01']
  - [4, '', '01']
  - [5, '', '01']
  - [6, '', '01']
  - [7, '', '01']
  - [8, '', '01']
  - [9, '', '01']
  - [1, '', '02']
  - [2, '', '02']
  - [3, '', '02']
  - [4, '', '02']
  - [5, '', '02']
  - [6, '', '02']
  - [7, '', '02']
  - [8, '', '02']
  - [9, '', '02']
  - [1, '', '03']
  - [2, '', '03']
  - [3, '', '03']
  - [4, '', '03']
  - [5, '', '03']
  - [6, '', '03']
  - [7, '', '03']
  - [8, '', '03']
  - [9, '', '03']
...
pk:select({}, { iterator = 'GT' })
---
- - [1, '', '01']
  - [2, '', '01']
  - [3, '', '01']
  - [4, '', '01']
  - [5, '', '01']
  - [6, '', '01']
  - [7, '', '01']
  - [8, '', '01']
  - [9, '', '01']
  - [1, '', '02']
  - [2, '', '02']
  - [3, '', '02']
  - [4, '', '02']
  - [5, '', '02']
  - [6, '', '02']
  - [7, '', '02']
  - [8, '', '02']
  - [9, '', '02']
  - [1, '', '03']
  - [2, '', '03']
  - [3, '', '03']
  - [4, '', '03']
  - [5, '', '03']
  - [6, '', '03']
  - [7, '', '03']
  - [8, '', '03']
  - [9, '', '03']
...
pk:select({}, { iterator = 'LE' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({}, { iterator = 'LT' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'00'}, { iterator = 'EQ' })
---
- []
...
pk:select({'00'}, { iterator = 'REQ' })
---
- []
...
pk:select({'00'}, { iterator = 'LE' })
---
- []
...
pk:select({'00'}, { iterator = 'LT' })
---
- []
...
pk:select({'01'}, { iterator = 'EQ' })
---
- - [1, '', '01']
  - [2, '', '01']
  - [3, '', '01']
  - [4, '', '01']
  - [5, '', '01']
  - [6, '', '01']
  - [7, '', '01']
  - [8, '', '01']
  - [9, '', '01']
...
pk:select({'01'}, { iterator = 'REQ' })
---
- - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'01'}, { iterator = 'LE' })
---
- - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'01'}, { iterator = 'LT' })
---
- []
...
pk:select({'09'}, { iterator = 'EQ' })
---
- []
...
pk:select({'09'}, { iterator = 'REQ' })
---
- []
...
pk:select({'09'}, { iterator = 'GE' })
---
- []
...
pk:select({'09'}, { iterator = 'GT' })
---
- []
...
pk:select({'10'}, { iterator = 'EQ' })
---
- []
...
pk:select({'10'}, { iterator = 'REQ' })
---
- []
...
pk:select({'10'}, { iterator = 'GE' })
---
- []
...
pk:select({'10'}, { iterator = 'GT' })
---
- []
...
pk:get({})
---
- error: Invalid key part count in an exact match (expected 2, got 0)
...
pk:get({'00'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
pk:get({'05'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
pk:get({'10'})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
--
-- two parts
--
pk:select({'05', 0}, { iterator = 'EQ' })
---
- []
...
pk:select({'05', 0}, { iterator = 'REQ' })
---
- []
...
pk:select({'05', 0}, { iterator = 'GE' })
---
- []
...
pk:select({'05', 0}, { iterator = 'GT' })
---
- []
...
pk:select({'05', 0}, { iterator = 'LE' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 0}, { iterator = 'LT' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 1}, { iterator = 'EQ' })
---
- []
...
pk:select({'05', 1}, { iterator = 'REQ' })
---
- []
...
pk:select({'05', 1}, { iterator = 'GE' })
---
- []
...
pk:select({'05', 1}, { iterator = 'GT' })
---
- []
...
pk:select({'05', 1}, { iterator = 'LE' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 1}, { iterator = 'LT' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 3}, { iterator = 'EQ' })
---
- []
...
pk:select({'05', 3}, { iterator = 'REQ' })
---
- []
...
pk:select({'05', 3}, { iterator = 'GE' })
---
- []
...
pk:select({'05', 3}, { iterator = 'GT' })
---
- []
...
pk:select({'05', 3}, { iterator = 'LE' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 3}, { iterator = 'LT' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 4}, { iterator = 'EQ' })
---
- []
...
pk:select({'05', 4}, { iterator = 'REQ' })
---
- []
...
pk:select({'05', 4}, { iterator = 'GE' })
---
- []
...
pk:select({'05', 4}, { iterator = 'GT' })
---
- []
...
pk:select({'05', 4}, { iterator = 'LE' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:select({'05', 4}, { iterator = 'LT' })
---
- - [9, '', '03']
  - [8, '', '03']
  - [7, '', '03']
  - [6, '', '03']
  - [5, '', '03']
  - [4, '', '03']
  - [3, '', '03']
  - [2, '', '03']
  - [1, '', '03']
  - [9, '', '02']
  - [8, '', '02']
  - [7, '', '02']
  - [6, '', '02']
  - [5, '', '02']
  - [4, '', '02']
  - [3, '', '02']
  - [2, '', '02']
  - [1, '', '02']
  - [9, '', '01']
  - [8, '', '01']
  - [7, '', '01']
  - [6, '', '01']
  - [5, '', '01']
  - [4, '', '01']
  - [3, '', '01']
  - [2, '', '01']
  - [1, '', '01']
...
pk:get({'04', 5})
---
...
pk:get({'04', 3})
---
...
pk:get({'04', 3, 100})
---
- error: Invalid key part count in an exact match (expected 2, got 3)
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- multiple indices
-------------------------------------------------------------------------------
space = box.schema.space.create('tweedledum', { engine = engine })
---
...
i0 = space:create_index('primary', { type = 'tree', parts = {1, 'num'}, unique = true })
---
...
i1 = space:create_index('i1', { type = 'tree', parts = {2, 'num'}, unique = false })
---
...
i2 = space:create_index('i2', { type = 'tree', parts = {3, 'num'}, unique = false })
---
...
i3 = space:create_index('i3', { type = 'tree', parts = {4, 'str', 5, 'str'}, unique = false })
---
...
i4 = space:create_index('i4', { type = 'tree', parts = {7, 'str', 6, 'str'}, unique = false })
---
...
i5 = space:create_index('i5', { type = 'tree', parts = {9, 'num'}, unique = false })
---
...
i6 = space:create_index('i6', { type = 'tree', parts = {7, 'str', 6, 'str', 4, 'str', 5, 'str', 9, 'num'}, unique = true })
---
...
space:insert{0, 0, 100, 'Joe', 'Sixpack', 'Drinks', 'Amstel', 'bar', 2000}
---
- [0, 0, 100, 'Joe', 'Sixpack', 'Drinks', 'Amstel', 'bar', 2000]
...
space:insert{1, 1, 200, 'Joe', 'Sixpack', 'Drinks', 'Heineken', 'bar', 2001}
---
- [1, 1, 200, 'Joe', 'Sixpack', 'Drinks', 'Heineken', 'bar', 2001]
...
space:insert{2, 2, 200, 'Joe', 'Sixpack', 'Drinks', 'Carlsberg', 'bar', 2002}
---
- [2, 2, 200, 'Joe', 'Sixpack', 'Drinks', 'Carlsberg', 'bar', 2002]
...
space:insert{3, 3, 300, 'Joe', 'Sixpack', 'Drinks', 'Corona Extra', 'bar', 2003}
---
- [3, 3, 300, 'Joe', 'Sixpack', 'Drinks', 'Corona Extra', 'bar', 2003]
...
space:insert{4, 4, 300, 'Joe', 'Sixpack', 'Drinks', 'Stella Artois', 'bar', 2004}
---
- [4, 4, 300, 'Joe', 'Sixpack', 'Drinks', 'Stella Artois', 'bar', 2004]
...
space:insert{5, 5, 300, 'Joe', 'Sixpack', 'Drinks', 'Miller Genuine Draft', 'bar', 2005}
---
- [5, 5, 300, 'Joe', 'Sixpack', 'Drinks', 'Miller Genuine Draft', 'bar', 2005]
...
space:insert{6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006}
---
- [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
...
space:insert{7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007}
---
- [7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007]
...
space:insert{8, 8, 400, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008}
---
- [8, 8, 400, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008]
...
space:insert{9, 9, 400, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009}
---
- [9, 9, 400, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009]
...
-- In non-unique indexes select output order is undefined,
-- so it's better to additionally sort output to receive same order every time.
function sort_cmp(a, b) return a[1] < b[1] and true or false end
---
...
function sort(t) table.sort(t, sort_cmp) return t end
---
...
space.index['primary']:get{1}
---
- [1, 1, 200, 'Joe', 'Sixpack', 'Drinks', 'Heineken', 'bar', 2001]
...
sort(space.index['i1']:select{2})
---
- - [2, 2, 200, 'Joe', 'Sixpack', 'Drinks', 'Carlsberg', 'bar', 2002]
...
sort(space.index[2]:select({300}))
---
- - [3, 3, 300, 'Joe', 'Sixpack', 'Drinks', 'Corona Extra', 'bar', 2003]
  - [4, 4, 300, 'Joe', 'Sixpack', 'Drinks', 'Stella Artois', 'bar', 2004]
  - [5, 5, 300, 'Joe', 'Sixpack', 'Drinks', 'Miller Genuine Draft', 'bar', 2005]
...
#space.index['i3']:select({'Joe', 'Sixpack'})
---
- 6
...
#space.index['i3']:select('John')
---
- 4
...
#space.index['i4']:select('A Pipe')
---
- 1
...
{sort(space.index['i4']:select{'Miller Genuine Draft', 'Drinks'})}
---
- - - [5, 5, 300, 'Joe', 'Sixpack', 'Drinks', 'Miller Genuine Draft', 'bar', 2005]
...
sort(space.index['i5']:select{2007})
---
- - [7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007]
...
sort(space.index[6]:select{'Miller Genuine Draft', 'Drinks'})
---
- - [5, 5, 300, 'Joe', 'Sixpack', 'Drinks', 'Miller Genuine Draft', 'bar', 2005]
...
tmp = space:delete{6}
---
...
tmp = space:delete{7}
---
...
tmp = space:delete{8}
---
...
tmp = space:delete{9}
---
...
space:insert{6, 6ULL, 400ULL, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006}
---
- [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
...
space:insert{7, 7ULL, 400ULL, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007}
---
- [7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007]
...
space:insert{8, 8ULL, 400ULL, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008}
---
- [8, 8, 400, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008]
...
space:insert{9, 9ULL, 400ULL, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009}
---
- [9, 9, 400, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009]
...
sort(space.index['i1']:select{6ULL})
---
- - [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
...
sort(space.index['i1']:select{6})
---
- - [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
...
sort(space.index['i2']:select(400ULL))
---
- - [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
  - [7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007]
  - [8, 8, 400, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008]
  - [9, 9, 400, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009]
...
sort(space.index['i2']:select(400))
---
- - [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
  - [7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007]
  - [8, 8, 400, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008]
  - [9, 9, 400, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009]
...
sort(space:select{})
---
- - [0, 0, 100, 'Joe', 'Sixpack', 'Drinks', 'Amstel', 'bar', 2000]
  - [1, 1, 200, 'Joe', 'Sixpack', 'Drinks', 'Heineken', 'bar', 2001]
  - [2, 2, 200, 'Joe', 'Sixpack', 'Drinks', 'Carlsberg', 'bar', 2002]
  - [3, 3, 300, 'Joe', 'Sixpack', 'Drinks', 'Corona Extra', 'bar', 2003]
  - [4, 4, 300, 'Joe', 'Sixpack', 'Drinks', 'Stella Artois', 'bar', 2004]
  - [5, 5, 300, 'Joe', 'Sixpack', 'Drinks', 'Miller Genuine Draft', 'bar', 2005]
  - [6, 6, 400, 'John', 'Smoker', 'Hits', 'A Pipe', 'foo', 2006]
  - [7, 7, 400, 'John', 'Smoker', 'Hits', 'A Bong', 'foo', 2007]
  - [8, 8, 400, 'John', 'Smoker', 'Rolls', 'A Joint', 'foo', 2008]
  - [9, 9, 400, 'John', 'Smoker', 'Rolls', 'A Blunt', 'foo', 2009]
...
-- Test incorrect keys - supplied key field type does not match index type
-- https://bugs.launchpad.net/tarantool/+bug/1072624
space:insert{'', 1, 2, '', '', '', '', '', 0}
---
- error: 'Tuple field 1 type does not match one required by operation: expected NUM'
...
space:insert{'xxxxxxxx', 1, 2, '', '', '', '', '', 0}
---
- error: 'Tuple field 1 type does not match one required by operation: expected NUM'
...
space:insert{1, '', 2, '', '', '', '', '', 0}
---
- error: 'Tuple field 2 type does not match one required by operation: expected NUM'
...
space:insert{1, 'xxxxxxxxxxx', 2, '', '', '', '', '', 0}
---
- error: 'Tuple field 2 type does not match one required by operation: expected NUM'
...
space:drop()
---
...
sort = nil
---
...
sort_cmp = nil
---
...
-------------------------------------------------------------------------------
-- gh-1467: invalid iterator type
-------------------------------------------------------------------------------
space = box.schema.space.create('invalid', { engine = engine })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'str'}})
---
...
pk:select({}, {iterator = 'BITS_ALL_SET'})
---
- error: Index 'primary' (TREE) of space 'invalid' (engine) does not support requested
    iterator type
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- Cleanup
-------------------------------------------------------------------------------
test_run:cmd("clear filter")
---
- true
...
engine = nil
---
...
test_run = nil
---
...
