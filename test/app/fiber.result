fiber = require('fiber')
---
...
space = box.schema.space.create('tweedledum')
---
...
index = space:create_index('primary', { type = 'hash' })
---
...
env = require('test_run')
---
...
test_run = env.new()
---
...
-- A test case for a race condition between ev_schedule
-- and wal_schedule fiber schedulers.
-- The same fiber should not be scheduled by ev_schedule (e.g.
-- due to cancellation) if it is within th wal_schedule queue.
-- The test case is dependent on rows_per_wal, since this is when
-- we reopen the .xlog file and thus wal_scheduler takes a long
-- pause
box.cfg.rows_per_wal
---
- 50
...
space:insert{1, 'testing', 'lua rocks'}
---
- [1, 'testing', 'lua rocks']
...
space:delete{1}
---
- [1, 'testing', 'lua rocks']
...
space:insert{1, 'testing', 'lua rocks'}
---
- [1, 'testing', 'lua rocks']
...
space:delete{1}
---
- [1, 'testing', 'lua rocks']
...
space:insert{1, 'test box delete'}
---
- [1, 'test box delete']
...
space:delete{1}
---
- [1, 'test box delete']
...
space:insert{1, 'test box delete'}
---
- [1, 'test box delete']
...
space:delete{1}
---
- [1, 'test box delete']
...
space:insert{1684234849, 'test box delete'}
---
- [1684234849, 'test box delete']
...
space:delete{1684234849}
---
- [1684234849, 'test box delete']
...
space:insert{1684234849, 'test box delete'}
---
- [1684234849, 'test box delete']
...
space:delete{1684234849}
---
- [1684234849, 'test box delete']
...
space:insert{1684234849, 'test box.select()'}
---
- [1684234849, 'test box.select()']
...
space:replace{1684234849, 'hello', 'world'}
---
- [1684234849, 'hello', 'world']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1684234849}
---
- [1684234849]
...
space:delete{1684234849}
---
- [1684234849]
...
space:delete{1667655012}
---
- [1667655012, 'goodbye', 'universe']
...
space:insert{1953719668, 'old', 1684234849}
---
- [1953719668, 'old', 1684234849]
...
-- test that insert produces a duplicate key error
space:insert{1953719668, 'old', 1684234849}
---
- error: Duplicate key exists in unique index 'primary' in space 'tweedledum'
...
space:update(1953719668, {{'=', 1, 1953719668}, {'=', 2, 'new'}})
---
- [1953719668, 'new', 1684234849]
...
space:update(1234567890, {{'+', 3, 1}})
---
...
space:update(1953719668, {{'+', 3, 1}})
---
- [1953719668, 'new', 1684234850]
...
space:update(1953719668, {{'-', 3, 1}})
---
- [1953719668, 'new', 1684234849]
...
space:update(1953719668, {{'-', 3, 1}})
---
- [1953719668, 'new', 1684234848]
...
space:update(1953719668, {{'+', 3, 1}})
---
- [1953719668, 'new', 1684234849]
...
space:delete{1953719668}
---
- [1953719668, 'new', 1684234849]
...
-- must be read-only
space:insert{1953719668}
---
- [1953719668]
...
space:insert{1684234849}
---
- [1684234849]
...
space:delete{1953719668}
---
- [1953719668]
...
space:delete{1684234849}
---
- [1684234849]
...
space:insert{1953719668, 'hello world'}
---
- [1953719668, 'hello world']
...
space:update(1953719668, {{'=', 2, 'bye, world'}})
---
- [1953719668, 'bye, world']
...
space:delete{1953719668}
---
- [1953719668, 'bye, world']
...
-- test tuple iterators
t = space:insert{1953719668}
---
...
t = space:replace{1953719668, 'another field'}
---
...
t = space:replace{1953719668, 'another field', 'one more'}
---
...
space:truncate()
---
...
-- test passing arguments in and out created fiber
test_run:cmd("setopt delimiter ';'")
---
- true
...
function y()
    space = box.space['tweedledum']
    while true do
        space:replace{1953719668, os.time()}
        fiber.sleep(0.001)
    end
end;
---
...
f = fiber.create(y);
---
...
fiber.sleep(0.002);
---
...
fiber.cancel(f);
---
...
-- fiber garbage collection
n = 1000;
---
...
ch = fiber.channel(n);
---
...
for k = 1, n, 1 do
    fiber.create(
        function()
            fiber.sleep(0)
            ch:put(k)
        end
    )
end;
---
...
for k = 1, n, 1 do
    ch:get()
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
collectgarbage('collect')
---
- 0
...
-- check that these newly created fibers are garbage collected
fiber.find(900)
---
- null
...
fiber.find(910)
---
- null
...
fiber.find(920)
---
- null
...
fiber.find()
---
- error: 'fiber.find(id): bad arguments'
...
fiber.find('test')
---
- null
...
--  https://github.com/tarantool/tarantool/issues/131
--  fiber.resume(fiber.cancel()) -- hang
f = fiber.create(function() fiber.cancel(fiber.self()) end)
---
...
f = nil
---
...
-- https://github.com/tarantool/tarantool/issues/119
ftest = function() fiber.sleep(0.0001 * math.random() ) return true end
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
result = 0;
---
...
for i = 1, 10 do
    local res = {}
    for j = 1, 300 do
        fiber.create(function() table.insert(res, ftest()) end)
    end
    while #res < 300 do fiber.sleep(0) end
    result = result + #res
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
result
---
- 3000
...
--
-- 
--  Test fiber.create()
-- 
--  This should try to infinitely create fibers,
--  but hit the fiber stack size limit and fail
--  with an error.
--
--  2016-03-25 kostja
--
--  fiber call stack depth was removed, we should
--  use runtime memory limit control instead; the
--  old limit was easy to circument with only
--  slightly more complicated fork bomb code
--
-- f = function() fiber.create(f) end
-- f()
-- 
-- Test argument passing
-- 
f = function(a, b) fiber.create(function(arg) result = arg end, a..b) end
---
...
f('hello ', 'world')
---
...
result
---
- hello world
...
f('bye ', 'world')
---
...
result
---
- bye world
...
-- 
-- Test that the created fiber is detached
-- 
local f = fiber.create(function() result = fiber.status() end)
---
...
result
---
- running
...
-- A test case for Bug#933487
-- tarantool crashed during shutdown if non running LUA fiber
-- was created
f = fiber.create(function () fiber.sleep(1) return true end)
---
...
box.snapshot()
---
- ok
...
_, e = pcall(box.snapshot)
---
...
e.message:match('already exists')
---
- already exists
...
_, e = pcall(box.snapshot)
---
...
e.message:match('already exists')
---
- already exists
...
f = fiber.create(function () fiber.sleep(1) end)
---
...
-- Test fiber.sleep()
fiber.sleep(0)
---
...
fiber.sleep(0.01)
---
...
fiber.sleep(0.0001)
---
...
fiber.sleep('hello')
---
- error: 'fiber.sleep(delay): bad arguments'
...
fiber.sleep(box, 0.001)
---
- error: 'fiber.sleep(delay): bad arguments'
...
-- test fiber.self()
f = fiber.self()
---
...
old_id = f:id()
---
...
fiber.self():id() - old_id < 3
---
- true
...
fiber.self():id() - old_id < 5
---
- true
...
g = fiber.self()
---
...
f==g
---
- true
...
-- arguments to fiber.create
f = fiber.create(print('hello'))
---
- error: '[string "f = fiber.create(print(''hello'')) "]:1: fiber.create(function,
    ...): bad arguments'
...
-- test passing arguments in and out created fiber
res = {}
---
...
function r(a, b) res = { a, b } end
---
...
f=fiber.create(r)
---
...
while f:status() == 'running' do fiber.sleep(0) end
---
...
res
---
- []
...
f=fiber.create(r, 'hello')
---
...
while f:status() == 'running' do fiber.sleep(0) end
---
...
res
---
- - hello
...
f=fiber.create(r, 'hello, world')
---
...
while f:status() == 'running' do fiber.sleep(0) end
---
...
res
---
- - hello, world
...
f=fiber.create(r, 'hello', 'world', 'wide')
---
...
while f:status() == 'running' do fiber.sleep(0) end
---
...
res
---
- - hello
  - world
...
--  test fiber.status functions: invalid arguments
fiber.status(1)
---
- error: 'bad argument #1 to ''?'' (fiber expected, got number)'
...
fiber.status('fafa-gaga')
---
- error: 'bad argument #1 to ''?'' (fiber expected, got string)'
...
fiber.status(nil)
---
- error: 'bad argument #1 to ''?'' (fiber expected, got nil)'
...
-- test fiber.cancel
function r() fiber.sleep(1000) end
---
...
f = fiber.create(r)
---
...
fiber.cancel(f)
---
...
while f:status() ~= 'dead' do fiber.sleep(0) end
---
...
f:status()
---
- dead
...
--  Test fiber.name()
old_name = fiber.name()
---
...
fiber.name() == old_name
---
- true
...
fiber.self():name() == old_name
---
- true
...
fiber.name('hello fiber')
---
...
fiber.name()
---
- hello fiber
...
fiber.self():name('bye fiber')
---
...
fiber.self():name()
---
- bye fiber
...
fiber.self():name(old_name)
---
...
space:drop()
---
...
-- box.fiber test (create, resume, yield, status)
dofile("fiber.lua")
---
...
-- print run fiber's test
box_fiber_run_test()
---
- - 'A: odd  1'
  - 'tester: status(printer) = suspended'
  - 'count: 1'
  - 'status: suspended'
  - 'B: odd  1'
  - 'C: event  2'
  - 'count: 2'
  - 'status: suspended'
  - 'A: odd  3'
  - 'count: 3'
  - 'status: suspended'
  - 'B: odd  3'
  - 'C: event  4'
  - 'D: event  4'
  - 'A: odd  5'
  - 'count: 4'
  - 'status: suspended'
  - 'B: odd  5'
...
-- various...
function testfun() while true do fiber.sleep(10) end end
---
...
f = fiber.create(testfun)
---
...
f:cancel()
---
...
fib_id = fiber.create(testfun):id()
---
...
fiber.find(fib_id):cancel()
---
...
while fiber.find(fib_id) ~= nil do fiber.sleep(0) end
---
...
fiber.find(fib_id)
---
- null
...
--
-- Test local storage
--
type(fiber.self().storage)
---
- table
...
fiber.self().storage.key = 48
---
...
fiber.self().storage.key
---
- 48
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function testfun(mgmt, ch)
    mgmt:get()
    ch:put(fiber.self().storage.key)
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
mgmt = fiber.channel()
---
...
ch = fiber.channel()
---
...
f = fiber.create(testfun, mgmt, ch)
---
...
f.storage.key = 'some value'
---
...
mgmt:put("wakeup plz")
---
- true
...
ch:get()
---
- some value
...
ch:close()
---
...
mgmt:close()
---
...
ch = nil
---
...
mgmt = nil
---
...
fiber.self().storage.key -- our local storage is not affected by f
---
- 48
...
-- attempt to access local storage of dead fiber raises error
pcall(function(f) return f.storage end, f)
---
- false
- '[string "return pcall(function(f) return f.storage end..."]:1: the fiber is dead'
...
--
-- Test that local storage is garbage collected when fiber is died
--
ffi = require('ffi')
---
...
ch = fiber.channel(1)
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function testfun()
    fiber.self().storage.x = ffi.gc(ffi.new('char[1]'),
         function() ch:put('gc ok') end)
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
f = fiber.create(testfun)
---
...
collectgarbage('collect')
---
- 0
...
ch:get()
---
- gc ok
...
ch:close()
---
...
ch = nil
---
...
--
-- Test that local storage is not garbage collected with fiber object
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
function testfun(ch)
    fiber.self().storage.x = 'ok'
    collectgarbage('collect')
    ch:put(fiber.self().storage.x or 'failed')
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
ch = fiber.channel(1)
---
...
fiber.create(testfun, ch):status()
---
- dead
...
ch:get()
---
- ok
...
ch:close()
---
...
ch = nil
---
...
-- # gh-125 box.fiber.cancel() by numeric id
--
function y() while true do fiber.sleep(0.001) end end
---
...
f = fiber.create(y)
---
...
fiber.kill(f:id())
---
...
while f:status() ~= 'dead' do fiber.sleep(0.01) end
---
...
-- # gh-420 fiber.cancel() assertion `!(f->flags & (1 << 2))' failed
--
done = false
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function test()
    fiber.name('gh-420')
    local fun, errmsg = loadstring('fiber.cancel(fiber.self())')
    xpcall(fun, function() end)
    xpcall(fun, function() end)
    done = true
    fun()
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
f = fiber.create(test)
---
...
done
---
- true
...
-- # gh-536: fiber.info() doesn't list fibers with default names
--
function loop() while true do fiber.sleep(10) end end
---
...
f1 = fiber.create(loop)
---
...
f2 = fiber.create(loop)
---
...
f3 = fiber.create(loop)
---
...
info = fiber.info()
---
...
info[f1:id()] ~= nil
---
- true
...
info[f2:id()] ~= nil
---
- true
...
info[f3:id()] ~= nil
---
- true
...
f1:cancel()
---
...
f2:cancel()
---
...
f3:cancel()
---
...
-- # gh-666: nulls in output
--
getmetatable(fiber.info())
---
- __serialize: mapping
...
zombie = false
---
...
for fid, i in pairs(fiber.info()) do if i.name == 'zombie' then zombie = true end end
---
...
zombie
---
- false
...
-- test case for gh-778 - fiber.id() on a dead fiber
f =  fiber.create(function() end)
---
...
id = f:id()
---
...
fiber.sleep(0)
---
...
f:status() 
---
- dead
...
id == f:id()
---
- true
...
--
-- gh-1238: log error if a fiber terminates due to uncaught Lua error
--
-- must show in the log
_ = fiber.create(function() error('gh-1238') end)
---
...
test_run:grep_log("default", "gh%-1238") ~= nil
---
- true
...
-- must NOT show in the log
_ = fiber.create(function() fiber.self():cancel() end)
---
...
fiber.sleep(0.001)
---
...
test_run:grep_log("default", "FiberIsCancelled") == nil
---
- true
...
-- must show in the log
_ = fiber.create(function() box.error(box.error.ILLEGAL_PARAMS, 'oh my') end)
---
...
test_run:grep_log("default", "ER_ILLEGAL_PARAMS:[^\n]*")
---
- 'ER_ILLEGAL_PARAMS: Illegal parameters, oh my'
...
-- #1734 fiber.name irt dead fibers
fiber.create(function()end):name()
---
- error: the fiber is dead
...
--
-- gh-1926
--
fiber.create(function() fiber.wakeup(fiber.self()) end)
---
- the fiber is dead
...
fiber = nil
---
...
test_run:cmd("clear filter")
---
- true
...
