--
-- gh-1233: JOIN/SUBSCRIBE must fail if master has wal_mode = "none"
--
env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd('switch default')
---
- true
...
box.schema.user.grant('guest', 'replication')
---
...
test_run:cmd("create server wal_off with rpl_master=default, script='replication/wal_off.lua'")
---
- true
...
test_run:cmd("start server wal_off")
---
- true
...
test_run:cmd('switch default')
---
- true
...
wal_off_uri = test_run:eval('wal_off', 'return box.cfg.listen')[1]
---
...
wal_off_uri ~= nil
---
- true
...
wal_off_id = test_run:eval('wal_off', 'return box.info.server.id')[1]
---
...
box.cfg { replication_source = wal_off_uri }
---
...
-- Replication does not support wal_mode = 'none'
box.info.replication[wal_off_id].message
---
- Replication does not support wal_mode = 'none'
...
box.info.replication[wal_off_id].status
---
- stopped
...
box.cfg { replication_source = "" }
---
...
test_run:cmd('switch wal_off')
---
- true
...
box.schema.user.revoke('guest', 'replication')
---
...
test_run:cmd('switch default')
---
- true
...
box.cfg { replication_source = wal_off_uri }
---
...
-- Read access is denied
box.info.replication[wal_off_id].message
---
- Read access on universe is denied for user 'guest'
...
box.info.replication[wal_off_id].status
---
- disconnected
...
box.cfg { replication_source = "" }
---
...
test_run:cmd("stop server wal_off")
---
- true
...
test_run:cmd("cleanup server wal_off")
---
- true
...
